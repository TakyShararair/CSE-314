diff --git a/.dir-locals.el b/.dir-locals.el
old mode 100644
new mode 100755
diff --git a/.editorconfig b/.editorconfig
old mode 100644
new mode 100755
diff --git a/.gdbinit.tmpl-riscv b/.gdbinit.tmpl-riscv
old mode 100644
new mode 100755
diff --git a/.gitignore b/.gitignore
old mode 100644
new mode 100755
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100755
index 0000000..49f0fdd
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,6 @@
+{
+    "files.associations": {
+        "pstat.h": "c",
+        "stdint.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/LICENSE b/LICENSE
old mode 100644
new mode 100755
diff --git a/Makefile b/Makefile
old mode 100644
new mode 100755
index 62fd0f8..f237306
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +162,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/README b/README
old mode 100644
new mode 100755
diff --git a/kernel/bio.c b/kernel/bio.c
old mode 100644
new mode 100755
diff --git a/kernel/buf.h b/kernel/buf.h
old mode 100644
new mode 100755
diff --git a/kernel/console.c b/kernel/console.c
old mode 100644
new mode 100755
diff --git a/kernel/defs.h b/kernel/defs.h
old mode 100644
new mode 100755
diff --git a/kernel/elf.h b/kernel/elf.h
old mode 100644
new mode 100755
diff --git a/kernel/entry.S b/kernel/entry.S
old mode 100644
new mode 100755
diff --git a/kernel/exec.c b/kernel/exec.c
old mode 100644
new mode 100755
diff --git a/kernel/fcntl.h b/kernel/fcntl.h
old mode 100644
new mode 100755
diff --git a/kernel/file.c b/kernel/file.c
old mode 100644
new mode 100755
diff --git a/kernel/file.h b/kernel/file.h
old mode 100644
new mode 100755
diff --git a/kernel/fs.c b/kernel/fs.c
old mode 100644
new mode 100755
diff --git a/kernel/fs.h b/kernel/fs.h
old mode 100644
new mode 100755
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
old mode 100644
new mode 100755
diff --git a/kernel/kernel.ld b/kernel/kernel.ld
old mode 100644
new mode 100755
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
old mode 100644
new mode 100755
diff --git a/kernel/log.c b/kernel/log.c
old mode 100644
new mode 100755
diff --git a/kernel/main.c b/kernel/main.c
old mode 100644
new mode 100755
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
old mode 100644
new mode 100755
diff --git a/kernel/param.h b/kernel/param.h
old mode 100644
new mode 100755
index 6624bff..6c81377
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,9 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define TIME_LIMIT_0 2
+#define TIME_LIMIT_1 4
+#define WAIT_THRESH  6
+#define DEFAULT_TICKETS 10
+
+typedef unsigned int   uint;
diff --git a/kernel/pipe.c b/kernel/pipe.c
old mode 100644
new mode 100755
diff --git a/kernel/plic.c b/kernel/plic.c
old mode 100644
new mode 100755
diff --git a/kernel/printf.c b/kernel/printf.c
old mode 100644
new mode 100755
diff --git a/kernel/proc.c b/kernel/proc.c
old mode 100644
new mode 100755
index 58a8a0b..4c2e3e3
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,14 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#define COLOR_RESET   "\033[0m"
+#define COLOR_GREEN   "\033[1;32m"
+#define COLOR_RED  "\033[1;31m"
+#define COLOR_YELLOW  "\033[1;33m"
+#define COLOR_BLUE  "\033[1;34m"
+#define COLOR_MAGENTA  "\033[1;35m"
+
+#include <stdint.h>
 
 struct cpu cpus[NCPU];
 
@@ -124,6 +132,8 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->original_tickets=DEFAULT_TICKETS;
+  p->inq=0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -321,7 +331,8 @@ fork(void)
   acquire(&np->lock);
   np->state = RUNNABLE;
   release(&np->lock);
-
+   np->original_tickets = p->original_tickets;
+   np->current_tickets = p->original_tickets;
   return pid;
 }
 
@@ -434,6 +445,74 @@ wait(uint64 addr)
   }
 }
 
+
+
+
+
+struct xorwow_state {
+    uint32_t x[5];
+    uint32_t counter;
+};
+
+/* The state array must be initialized to not be all zero in the first four words */
+uint32_t xorwow(struct xorwow_state *state)
+{
+    /* Algorithm "xorwow" from p. 5 of Marsaglia, "Xorshift RNGs" */
+    uint32_t t  = state->x[4];
+ 
+    uint32_t s  = state->x[0];  /* Perform a contrived 32-bit rotate. */
+    state->x[4] = state->x[3];
+    state->x[3] = state->x[2];
+    state->x[2] = state->x[1];
+    state->x[1] = s;
+ 
+    t ^= t >> 2;
+    t ^= t << 1;
+    t ^= s ^ (s << 4);
+    state->x[0] = t;
+    state->counter += 362437;
+    return t + state->counter;
+}
+
+int log_flag = 0;
+
+void update_waiting_time(struct proc *current_proc)
+{
+  struct proc *p;
+  for(p = proc ; p < &proc[NPROC]; p++)
+  {
+    if(p== current_proc || p->state != RUNNABLE)
+    {
+      continue;
+    }
+    p->waiting_time++;
+
+    if(p->inq == 0)
+    {
+      p->queue_ticks[0]++;
+
+    }
+    else{
+      p->queue_ticks[1]++;
+    }
+    if(p->waiting_time >= WAIT_THRESH && p->inq==1)
+    {
+      p->inq = 0;
+      if(log_flag == 1)
+      {
+        printf(COLOR_BLUE "BOOST: Process %d (%s) waited for %d ticks, promoted to queue 0" COLOR_RESET "\n", p->pid,p->name,p->waiting_time);
+      }
+      p->waiting_time = 0;
+    }
+  }
+}
+
+
+        struct xorwow_state state = {
+         .x = {123456789, 362436069, 521288629, 88675123, 5783321},
+         .counter = 0
+       };
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -445,7 +524,9 @@ void
 scheduler(void)
 {
   struct proc *p;
+  struct proc *q;
   struct cpu *c = mycpu();
+  //int total_tickets;
 
   c->proc = 0;
   for(;;){
@@ -453,10 +534,101 @@ scheduler(void)
     // turned off; enable them to avoid a deadlock if all
     // processes are waiting.
     intr_on();
+    int total_tickets = 0;
+
+    for(p=proc ; p < &proc[NPROC];p++)
+    {
+      if(p->state == RUNNABLE && p->inq==0)
+      {
+        total_tickets += p->current_tickets;
+      }
+    }
+
+      if(total_tickets == 0)
+      {
+        for(p=proc ; p < &proc[NPROC];p++)
+        {
+          p->current_tickets = p->original_tickets;
+          total_tickets += p->current_tickets;
+        }
+      }
+   
+
+    while(1)
+    {
+      int possible_candidate[NPROC];
+      int possible_candidate_index = 0;
+      int possible_ticket_sum = 0;
+
+      for(int i=0; i < NPROC ; i++)
+      {
+        q = &proc[i];
+        if(q->state == RUNNABLE && q->inq ==0 && q->current_tickets > 0)
+        {
+          possible_candidate[possible_candidate_index++] = i;
+          possible_ticket_sum += q->current_tickets;
+        }
+      }
+      if(possible_ticket_sum==0)
+      {
+        break;
+      }
+
+       int winning_ticket_val = xorwow(&state) % possible_ticket_sum;
+       int winner = -1;
+       int sum=0;
+       for(int count = 0; count < possible_candidate_index; count++)
+       {
+           struct proc *candidate_proc = &proc[possible_candidate[count]];
+          sum += candidate_proc->current_tickets;
+          if (sum > winning_ticket_val) {
+              winner = possible_candidate[count];
+              if(log_flag==1)
+              {
+                printf(COLOR_GREEN "LOTTERY: Process %d (%s) won in queue 0 with tickets %d" COLOR_RESET "\n",candidate_proc->pid,candidate_proc->name,candidate_proc->current_tickets);
+              }
+              break;
+          }
+       }
+
+       struct proc *winproc = &proc[winner];
+       acquire(&winproc->lock);
+       winproc->times_scheduled++;
+       winproc->current_tickets--;
+       while (winproc->state == RUNNABLE && winproc->running_time < TIME_LIMIT_0)
+       {
+         winproc->state = RUNNING;
+         c->proc = winproc;
+         swtch(&c->context,&winproc->context);
+         c->proc = 0;
+         winproc->running_time++;
+         //release(&winproc->lock);
+         update_waiting_time(winproc);
+         //acquire(&winproc->lock);
+       }
+       if(winproc->running_time >= TIME_LIMIT_0)
+       {
+        if(log_flag==1)
+        {
+          printf(COLOR_YELLOW "DEMO: Process %d (%s) ran for %d time ticks, demoted to queue 1" COLOR_RESET "\n",winproc->pid,winproc->name,winproc->running_time);
+         
+        }
+         winproc->inq=1;
+       }
+      winproc->running_time = 0;
+      release(&winproc->lock);
+      winproc->waiting_time = 0;
+       
+
+    }
+
 
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+      if(p->inq == 1 && p->state == RUNNABLE) {
+        p->times_scheduled++;
+   
+        while(p->state == RUNNABLE && p->running_time < TIME_LIMIT_1){
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
@@ -467,6 +639,22 @@ scheduler(void)
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
+        p->running_time += 1;
+        //release(&p->lock);
+        update_waiting_time(p);
+        //acquire(&p->lock);
+        }
+        
+        if(p->running_time < TIME_LIMIT_1)
+        {
+            p->inq = 0;
+             if(log_flag==1){
+              printf(COLOR_BLUE "PROMO: Process %d (%s) ran for %d time ticks, promoted to queue 0" COLOR_RESET "\n",p->pid,p->name,p->running_time);
+             }
+        }
+        p->running_time = 0;
+        p->waiting_time = 0;
+
       }
       release(&p->lock);
     }
@@ -686,3 +874,5 @@ procdump(void)
     printf("\n");
   }
 }
+
+
diff --git a/kernel/proc.h b/kernel/proc.h
old mode 100644
new mode 100755
index d021857..80cace7
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,14 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int original_tickets;
+  int current_tickets;
+  int inq;
+  int times_scheduled;
+  int waiting_time;
+  int running_time;
+  uint queue_ticks[2];
+  
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100755
index 0000000..863e259
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,16 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+struct pstat {
+int pid[NPROC]; // the process ID of each process
+int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+int inQ[NPROC]; // which queue the process is currently in
+int waiting_time[NPROC]; // the time each process has spent waiting before being scheduled
+int running_time[NPROC]; // Number of times the process was scheduled before its time slice was used
+int times_scheduled[NPROC]; // the total number of times this process was scheduled
+int tickets_original[NPROC]; // the number of tickets each process originally had
+int tickets_current[NPROC]; // the number of tickets each process currently has
+uint queue_ticks[NPROC][2]; // the total number of ticks each process has spent in each queue
+};
+
+#endif // _PSTAT_H_
diff --git a/kernel/ramdisk.c b/kernel/ramdisk.c
old mode 100644
new mode 100755
diff --git a/kernel/riscv.h b/kernel/riscv.h
old mode 100644
new mode 100755
diff --git a/kernel/sleeplock.c b/kernel/sleeplock.c
old mode 100644
new mode 100755
diff --git a/kernel/sleeplock.h b/kernel/sleeplock.h
old mode 100644
new mode 100755
diff --git a/kernel/spinlock.c b/kernel/spinlock.c
old mode 100644
new mode 100755
diff --git a/kernel/spinlock.h b/kernel/spinlock.h
old mode 100644
new mode 100755
diff --git a/kernel/start.c b/kernel/start.c
old mode 100644
new mode 100755
diff --git a/kernel/stat.h b/kernel/stat.h
old mode 100644
new mode 100755
diff --git a/kernel/string.c b/kernel/string.c
old mode 100644
new mode 100755
diff --git a/kernel/swtch.S b/kernel/swtch.S
old mode 100644
new mode 100755
diff --git a/kernel/syscall.c b/kernel/syscall.c
old mode 100644
new mode 100755
index ed65409..ce52e87
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
old mode 100644
new mode 100755
index bc5f356..7926b7f
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
old mode 100644
new mode 100755
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
old mode 100644
new mode 100755
index 3b4d5bd..af7e11e
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
 
 uint64
 sys_exit(void)
@@ -91,3 +92,72 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_settickets(void)
+{
+    int ticket_count;
+    argint(0,&ticket_count);
+    struct proc *cp=myproc();
+    if(ticket_count < 1 )
+    {
+        acquire(&cp->lock);
+        cp->original_tickets = DEFAULT_TICKETS;
+        cp->current_tickets = DEFAULT_TICKETS;
+        release(&cp->lock);
+ 
+      return -1;
+    }
+    else
+    {
+      acquire(&cp->lock);     
+      cp->original_tickets = ticket_count;   
+      cp->current_tickets = ticket_count;     
+      release(&cp->lock);
+      return 0; 
+      
+    }
+}
+extern struct proc proc[NPROC];
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr;
+  argaddr(0,&addr);
+  if(addr <= 0)
+  {
+    return -1;
+  }
+  else
+  {
+    struct proc* mp = myproc();
+    struct proc* p;
+    struct pstat pst;
+    int i=0;
+    for(p= proc ; p < &proc[NPROC]; p++)
+   {
+        acquire(&p->lock);
+        pst.pid[i]=p->pid;
+        pst.inQ[i] = p->inq;
+        pst.inuse[i]=(p->state == RUNNING || p->state == RUNNABLE);
+        pst.tickets_original[i] = p->original_tickets;
+        pst.tickets_current[i] = p->current_tickets;
+        pst.times_scheduled[i]=p->times_scheduled;
+        pst.waiting_time[i]=p->waiting_time;
+        pst.running_time[i]=p->running_time;
+        pst.queue_ticks[i][0]=p->queue_ticks[0];
+        pst.queue_ticks[i][1]=p->queue_ticks[1];
+        release(&p->lock);
+        i++;
+   } 
+   if (copyout(mp->pagetable, addr, (char *) &pst, sizeof(pst)) < 0)
+   {
+     printf("sdklsdl");
+     return -1;
+   }
+   return 0;
+  }
+}
+
diff --git a/kernel/trampoline.S b/kernel/trampoline.S
old mode 100644
new mode 100755
diff --git a/kernel/trap.c b/kernel/trap.c
old mode 100644
new mode 100755
diff --git a/kernel/types.h b/kernel/types.h
old mode 100644
new mode 100755
diff --git a/kernel/uart.c b/kernel/uart.c
old mode 100644
new mode 100755
diff --git a/kernel/virtio.h b/kernel/virtio.h
old mode 100644
new mode 100755
diff --git a/kernel/virtio_disk.c b/kernel/virtio_disk.c
old mode 100644
new mode 100755
diff --git a/kernel/vm.c b/kernel/vm.c
old mode 100644
new mode 100755
diff --git a/mkfs/mkfs.c b/mkfs/mkfs.c
old mode 100644
new mode 100755
diff --git a/user/cat.c b/user/cat.c
old mode 100644
new mode 100755
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100755
index 0000000..d8df0dc
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,55 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+
+void iterate(int iterations, int pid)
+{
+    if (pid == 0)
+    { // Child process
+     
+        for (int i=1;;i++)
+        {
+          // if (i % 100000000 == 0) sleep(1);
+        }
+        exit(0);
+    }
+    else
+    { // Parent process
+        for (int i=0;i<iterations;i++)
+        {
+            
+        }
+      //  wait(0); // Wait for the child process to complete
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    if (argc != 3)
+    {
+        printf("Usage: dummyproc <tickets> <iterations>\n");
+        exit(1);
+    }
+
+    int tickets = atoi(argv[1]);
+    int iterations = atoi(argv[2]);
+
+    if (settickets(tickets) < 0)
+    {
+        printf("Error setting tickets\n");
+        exit(1);
+    }
+
+    int pid=fork();
+    if(pid<0)
+    {
+        printf("Error creating child process\n");
+        exit(1);
+    }
+    iterate(iterations, pid);
+    exit(0);
+}
+
+
diff --git a/user/echo.c b/user/echo.c
old mode 100644
new mode 100755
diff --git a/user/forktest.c b/user/forktest.c
old mode 100644
new mode 100755
diff --git a/user/grep.c b/user/grep.c
old mode 100644
new mode 100755
diff --git a/user/grind.c b/user/grind.c
old mode 100644
new mode 100755
diff --git a/user/init.c b/user/init.c
old mode 100644
new mode 100755
diff --git a/user/initcode.S b/user/initcode.S
old mode 100644
new mode 100755
diff --git a/user/kill.c b/user/kill.c
old mode 100644
new mode 100755
diff --git a/user/ln.c b/user/ln.c
old mode 100644
new mode 100755
diff --git a/user/ls.c b/user/ls.c
old mode 100644
new mode 100755
diff --git a/user/mkdir.c b/user/mkdir.c
old mode 100644
new mode 100755
diff --git a/user/printf.c b/user/printf.c
old mode 100644
new mode 100755
diff --git a/user/rm.c b/user/rm.c
old mode 100644
new mode 100755
diff --git a/user/sh.c b/user/sh.c
old mode 100644
new mode 100755
diff --git a/user/stressfs.c b/user/stressfs.c
old mode 100644
new mode 100755
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100755
index 0000000..fff6256
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,25 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+int main(int argc,char* argv[])
+{
+    struct pstat pstat;
+    if(getpinfo(&pstat) < 0)
+    {
+        fprintf(2, "%s : exec failed \n ", argv[0]);
+        exit(1);
+    }
+    printf(" PID |  In Use | In Q | Waiting Time | Running Time | Time Scheduled | Original Tickets | Current Tickets |   q0   |   q1\n ");
+
+    for(int i=0; i < NPROC ; i++)
+    {
+        if(pstat.pid[i] == 0)
+        {
+            continue;
+        }
+        printf("%d\t %d\t %d\t\t %d\t\t %d\t\t %d\t\t %d\t\t %d\t\t %d\t %d\n",pstat.pid[i],pstat.inuse[i],pstat.inQ[i],pstat.waiting_time[i],pstat.running_time[i],pstat.times_scheduled[i],pstat.tickets_original[i],pstat.tickets_current[i],pstat.queue_ticks[i][0],pstat.queue_ticks[i][1]);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/ulib.c b/user/ulib.c
old mode 100644
new mode 100755
diff --git a/user/umalloc.c b/user/umalloc.c
old mode 100644
new mode 100755
diff --git a/user/user.h b/user/user.h
old mode 100644
new mode 100755
index 04013ca..b000040
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/user.ld b/user/user.ld
old mode 100644
new mode 100755
diff --git a/user/usertests.c b/user/usertests.c
old mode 100644
new mode 100755
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
diff --git a/user/wc.c b/user/wc.c
old mode 100644
new mode 100755
diff --git a/user/zombie.c b/user/zombie.c
old mode 100644
new mode 100755
